{"version":3,"sources":["lib/Grid.ts","components/Timer/Timer.tsx","components/GridCell/GridCell.tsx","components/Grid/Grid.tsx","components/Tile/Tile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GridCellKind","TimerState","GridCell","kind","Empty","visible","flagged","neighbors","this","Mine","Grid","rows","columns","mines","cells","flags","covered","Math","max","min","create","i","push","j","k","floor","random","isMine","setKind","map","ii","jj","isInGrid","Boolean","toggleFlag","hasNeighbours","makeVisible","row","column","renderer","className","cellRenderer","Array","fill","_","Tile","active","mine","others","clsx","GameState","Timer","state","timer","useRef","undefined","useState","seconds","setSeconds","useEffect","Reset","clearInterval","current","Running","window","setInterval","Stopped","cancelEvent","event","preventDefault","stopPropagation","App","grid","setGrid","moves","setMoves","Default","gameState","setGameState","guessing","setGuessing","timerState","setTimerState","playing","Playing","handleMouseDown","handleMouseUp","handleAddFlag","isVisible","handleSelect","showMines","Lost","hasWon","Won","makeClickHandler","handler","onContextMenu","onClick","cell","cellAt","onMouseDown","onMouseUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.414e9d30.chunk.js","sourcesContent":["export enum GridCellKind {\n  Empty = 'empty',\n  Mine = 'mine',\n}\n\nexport class GridCell {\n  kind: GridCellKind = GridCellKind.Empty;\n  visible: boolean = false;\n  flagged: boolean = false;\n  neighbors: number = 0;\n\n  setKind(kind: GridCellKind) {\n    this.kind = kind;\n  }\n\n  isMine(): boolean {\n    return this.kind === GridCellKind.Mine;\n  }\n}\n\nexport class Grid {\n  cells: GridCell[][];\n  rows: number;\n  columns: number;\n  mines: number;\n  flags: number;\n  covered: number;\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.rows = Math.max(rows, 2);\n    this.columns = Math.max(columns, 2);\n    this.mines = Math.max(Math.min(mines, this.rows * this.columns - 1), 1);\n    this.flags = this.covered = this.mines;\n    this.cells = [];\n    this.create();\n  }\n\n  create() {\n    for (let i: number = 0; i < this.rows; i++) {\n      this.cells.push([]);\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i].push(new GridCell());\n      }\n    }\n    for (let k: number = this.mines; k > 0; k--) {\n      const i: number = Math.floor(Math.random() * this.rows);\n      const j: number = Math.floor(Math.random() * this.columns);\n      if (this.isMine(i, j)) {\n        k++;\n      } else {\n        this.cells[i][j].setKind(GridCellKind.Mine);\n      }\n    }\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (!this.isMine(i, j)) {\n          let neighbors = 0;\n          [i - 1, i, i + 1].map((ii) =>\n            // eslint-disable-next-line array-callback-return\n            [j - 1, j, j + 1].map((jj) => {\n              if (this.isMine(ii, jj)) {\n                neighbors++;\n              }\n            })\n          );\n          this.cells[i][j].neighbors = neighbors;\n        }\n      }\n    }\n    this.flags = this.covered = this.mines;\n  }\n\n  cellAt(i: number, j: number): GridCell {\n    return this.cells[i][j];\n  }\n\n  isInGrid(i: number, j: number): boolean {\n    return i >= 0 && i < this.rows && j >= 0 && j < this.columns;\n  }\n\n  isMine(i: number, j: number): boolean {\n    return this.isInGrid(i, j) && this.cells[i][j].isMine();\n  }\n\n  isVisible(i: number, j: number): boolean {\n    return this.isInGrid(i, j) && this.cells[i][j].visible;\n  }\n\n  reset() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i][j].flagged = false;\n        this.cells[i][j].visible = false;\n      }\n    }\n  }\n\n  restart() {\n    this.create();\n  }\n\n  reveal() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (this.isMine(i, j)) {\n          this.cells[i][j].flagged = false;\n          this.cells[i][j].visible = true;\n        }\n      }\n    }\n  }\n\n  hasWon(): boolean {\n    return this.covered === this.mines;\n  }\n\n  toggleFlag(i: number, j: number) {\n    this.cells[i][j].flagged = !this.cells[i][j].flagged;\n    if (this.cells[i][j].flagged) {\n      this.flags--;\n    } else {\n      this.flags++;\n    }\n  }\n\n  hasNeighbours(i: number, j: number): boolean {\n    return Boolean(this.isInGrid(i, j) && this.cells[i][j].neighbors > 0);\n  }\n\n  makeVisible(i: number, j: number) {\n    if (\n      this.isInGrid(i, j) &&\n      !this.cells[i][j].visible &&\n      !this.cells[i][j].isMine() //&&\n      //!this.cells[i][j].flagged\n    ) {\n      this.cells[i][j].visible = true;\n      this.covered--;\n      if (this.cells[i][j].flagged) {\n        this.toggleFlag(i, j);\n      }\n      if (!this.hasNeighbours(i, j)) {\n        this.makeVisible(i - 1, j);\n        this.makeVisible(i + 1, j);\n\n        this.makeVisible(i, j - 1);\n        this.makeVisible(i, j + 1);\n\n        this.makeVisible(i - 1, j - 1);\n        this.makeVisible(i - 1, j + 1);\n\n        this.makeVisible(i + 1, j - 1);\n        this.makeVisible(i + 1, j + 1);\n      }\n    }\n  }\n\n  showMines() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (this.isMine(i, j)) {\n          this.cells[i][j].flagged = false;\n          this.cells[i][j].visible = true;\n        }\n      }\n    }\n  }\n}\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport './Timer.scss';\n\ninterface TimerProps {\n  state: TimerState;\n}\n\nexport enum TimerState {\n  Reset,\n  Running,\n  Stopped,\n}\n\nconst Timer: React.FC<TimerProps> = ({ state }) => {\n  const timer = useRef<number | undefined>(undefined);\n  const [seconds, setSeconds] = useState<number>(0);\n  useEffect(() => {\n    switch (state) {\n      case TimerState.Reset:\n        setSeconds(() => 0);\n        clearInterval(timer.current);\n        timer.current = undefined;\n        break;\n      case TimerState.Running:\n        if (!timer.current) {\n          setSeconds(() => 0);\n          timer.current = window.setInterval(() => {\n            setSeconds((seconds: number) => seconds + 1);\n          }, 1000);\n        }\n        break;\n      case TimerState.Stopped:\n        clearInterval(timer.current);\n        timer.current = undefined;\n        break;\n      default:\n    }\n    return () => {\n      clearInterval(timer.current);\n      timer.current = undefined;\n    };\n  }, [state, timer]);\n\n  return <div className=\"timer\">Time: {seconds}</div>;\n};\n\nexport default Timer;\n","import React from 'react';\n\nimport './GridCell.scss';\n\ninterface GridCellProps {\n  row: number;\n  column: number;\n  renderer: (i: number, j: number) => any;\n}\n\nconst GridCell: React.FC<GridCellProps> = ({ row, column, renderer }) => {\n  return <div className=\"grid-cell\">{renderer(row, column)}</div>;\n};\n\nexport default GridCell;\n","import React from 'react';\n\nimport GridCell from '../GridCell';\n\nimport './Grid.scss';\n\ninterface GridProps {\n  rows: number;\n  columns: number;\n  cellRenderer: (i: number, j: number) => any;\n}\n\nconst Grid: React.FC<GridProps> = ({ rows, columns, cellRenderer }) => {\n  return (\n    <div className=\"grid\">\n      {Array(rows)\n        .fill(1)\n        .map((_: any, i: number) => (\n          <div key={`grid-row-${i + 1}`} className=\"grid-cell-row\">\n            {Array(columns)\n              .fill(1)\n              .map((_: any, j: number) => (\n                <div key={`grid-column-${j + 1}`} className=\"grid-cell-column\">\n                  <GridCell row={i} column={j} renderer={cellRenderer} />\n                </div>\n              ))}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport './Tile.scss';\n\ninterface TileProps {\n  active: boolean;\n  visible: boolean;\n  mine: boolean;\n  flagged: boolean;\n  neighbors: number;\n}\n\nconst Tile: React.FC<TileProps> = ({\n  active,\n  visible,\n  mine,\n  flagged,\n  neighbors,\n  ...others\n}) => {\n  return (\n    <div\n      className={clsx('tile', {\n        'tile-active': active,\n        'tile-visible': visible,\n      })}\n      {...others}\n    >\n      <div\n        className={clsx(\n          'tile-image',\n          `tile-image-kind-${mine ? 'mine' : 'empty'}`\n        )}\n      />\n      <div className={clsx('tile-neighbors', `tile-neighbors-${neighbors}`)} />\n      {flagged ? <div className=\"tile-flagged\" /> : null}\n    </div>\n  );\n};\n\nexport default Tile;\n","import clsx from 'clsx';\nimport React, { useState, MouseEvent } from 'react';\n\nimport { Grid } from './lib/Grid';\nimport GridComponent from './components/Grid';\nimport Tile from './components/Tile';\nimport Timer, { TimerState } from './components/Timer';\n\nimport './App.scss';\n\nenum GameState {\n  Default,\n  Playing,\n  Won,\n  Lost,\n}\n\nconst cancelEvent = (event: MouseEvent) => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\nfunction App() {\n  const [rows] = useState<number>(12);\n  const [columns] = useState<number>(12);\n  const [mines] = useState<number>(24);\n\n  const [grid, setGrid] = useState<Grid>(new Grid(rows, columns, mines));\n  const [moves, setMoves] = useState<number>(0);\n\n  const [gameState, setGameState] = useState<GameState>(GameState.Default);\n  const [guessing, setGuessing] = useState<Boolean>(false);\n  const [timerState, setTimerState] = useState<TimerState>(TimerState.Stopped);\n\n  const playing = gameState === GameState.Playing;\n  const active = playing || gameState === GameState.Default;\n\n  const handleRestart = () => {\n    setGrid(new Grid(rows, columns, mines));\n    setMoves(0);\n    setGameState(GameState.Default);\n    setTimerState(TimerState.Reset);\n  };\n\n  const handleMouseDown = (event: MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (playing) setGuessing(true);\n  };\n\n  const handleMouseUp = (event: MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (playing) setGuessing(false);\n  };\n\n  const handleAddFlag = (i: number, j: number) => {\n    if (!grid.isVisible(i, j)) {\n      grid.toggleFlag(i, j);\n      setMoves(moves + 1);\n      setGameState(GameState.Playing);\n      setTimerState(TimerState.Running);\n    }\n  };\n\n  const handleSelect = (i: number, j: number) => {\n    if (grid.isMine(i, j)) {\n      grid.showMines();\n      setGameState(GameState.Lost);\n      setTimerState(TimerState.Stopped);\n    } else {\n      grid.makeVisible(i, j);\n      if (grid.hasWon()) {\n        setGameState(GameState.Won);\n        setTimerState(TimerState.Stopped);\n      } else {\n        setGameState(GameState.Playing);\n        setTimerState(TimerState.Running);\n      }\n    }\n    setMoves(moves + 1);\n  };\n\n  const makeClickHandler = (\n    handler: (i: number, j: number) => void,\n    i: number,\n    j: number\n  ): ((event: MouseEvent) => void) | undefined => {\n    if (!active) {\n      return undefined;\n    }\n    return (event: MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      handler(i, j);\n    };\n  };\n\n  return (\n    <div className=\"App\" onContextMenu={cancelEvent} onClick={cancelEvent}>\n      <div className=\"heading\">Pigsweeper</div>\n      <div className=\"game\">\n        <div className=\"dashboard\">\n          <div className=\"dashboard-timer\">\n            <Timer state={timerState} />\n          </div>\n          <div\n            className={clsx('dashboard-status', {\n              'status-lost': gameState === GameState.Lost,\n              'status-guessing': guessing,\n              'status-won': gameState === GameState.Won,\n            })}\n            onClick={handleRestart}\n          />\n          <div className=\"dashboard-flags\">Flags: {grid.flags}</div>\n        </div>\n        <GridComponent\n          rows={grid.rows}\n          columns={grid.columns}\n          cellRenderer={(i: number, j: number) => {\n            const cell = grid.cellAt(i, j);\n\n            return (\n              <div\n                onMouseDown={handleMouseDown}\n                onMouseUp={handleMouseUp}\n                onClick={makeClickHandler(handleSelect, i, j)}\n                onContextMenu={makeClickHandler(handleAddFlag, i, j)}\n              >\n                <Tile\n                  active={active}\n                  visible={cell.visible}\n                  mine={cell.isMine()}\n                  neighbors={cell.neighbors}\n                  flagged={cell.flagged}\n                />\n              </div>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}