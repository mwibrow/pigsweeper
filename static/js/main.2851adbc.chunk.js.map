{"version":3,"sources":["lib/Grid.ts","components/Sprite/Sprite.tsx","components/GridCell/GridCell.tsx","components/Grid/Grid.tsx","components/Timer/Timer.tsx","components/Tile/Tile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GridCellKind","SpriteName","GridCell","kind","Empty","visible","flagged","neighbors","this","Mine","Grid","rows","columns","mines","cells","flags","covered","Math","max","min","create","i","push","j","k","floor","random","isMine","setKind","map","ii","jj","isInGrid","Boolean","hasNeighbours","makeVisible","row","column","renderer","className","cellRenderer","Array","fill","_","TimerState","Sprite","name","names","isArray","index","clsx","Tile","active","mine","spriteNames","Covered","Flag","GameState","Timer","state","timer","useRef","undefined","useState","seconds","setSeconds","useEffect","Reset","clearInterval","current","Running","window","setInterval","Stopped","App","grid","setGrid","moves","setMoves","Default","gameState","setGameState","guessing","setGuessing","timerState","setTimerState","playing","Playing","handleMouseDown","handleMouseUp","handleAddFlag","toggleFlag","handleSelect","showMines","Lost","hasWon","Won","makeClickHandler","handler","event","preventDefault","stopPropagation","smiley","Scared","Happy","Sad","onClick","cell","cellAt","onMouseDown","onMouseUp","onContextMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2851adbc.chunk.js","sourcesContent":["export enum GridCellKind {\n  Empty = 'empty',\n  Mine = 'mine',\n}\n\nexport class GridCell {\n  kind: GridCellKind = GridCellKind.Empty;\n  visible: boolean = false;\n  flagged: boolean = false;\n  neighbors: number = 0;\n\n  setKind(kind: GridCellKind) {\n    this.kind = kind;\n  }\n\n  isMine(): boolean {\n    return this.kind === GridCellKind.Mine;\n  }\n}\n\nexport class Grid {\n  cells: GridCell[][];\n  rows: number;\n  columns: number;\n  mines: number;\n  flags: number;\n  covered: number;\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.rows = Math.max(rows, 2);\n    this.columns = Math.max(columns, 2);\n    this.mines = Math.max(Math.min(mines, this.rows * this.columns - 1), 1);\n    this.flags = this.mines;\n    this.covered = this.mines;\n    this.cells = [];\n    this.create();\n  }\n\n  create() {\n    for (let i: number = 0; i < this.rows; i++) {\n      this.cells.push([]);\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i].push(new GridCell());\n      }\n    }\n    for (let k: number = this.mines; k > 0; k--) {\n      const i: number = Math.floor(Math.random() * this.rows);\n      const j: number = Math.floor(Math.random() * this.columns);\n      if (this.isMine(i, j)) {\n        k++;\n      } else {\n        this.cells[i][j].setKind(GridCellKind.Mine);\n      }\n    }\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (!this.isMine(i, j)) {\n          let neighbors = 0;\n          [i - 1, i, i + 1].map((ii) =>\n            // eslint-disable-next-line array-callback-return\n            [j - 1, j, j + 1].map((jj) => {\n              if (this.isMine(ii, jj)) {\n                neighbors++;\n              }\n            })\n          );\n          this.cells[i][j].neighbors = neighbors;\n        }\n      }\n    }\n    this.covered = this.mines;\n    this.flags = this.mines;\n  }\n\n  cellAt(i: number, j: number): GridCell {\n    return this.cells[i][j];\n  }\n\n  isInGrid(i: number, j: number): boolean {\n    return i >= 0 && i < this.rows && j >= 0 && j < this.columns;\n  }\n\n  isMine(i: number, j: number): boolean {\n    return this.isInGrid(i, j) && this.cells[i][j].isMine();\n  }\n\n  reset() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i][j].flagged = false;\n        this.cells[i][j].visible = false;\n      }\n    }\n  }\n\n  restart() {\n    this.create();\n  }\n\n  reveal() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (this.isMine(i, j)) {\n          this.cells[i][j].flagged = false;\n          this.cells[i][j].visible = true;\n        }\n      }\n    }\n  }\n\n  toggleFlag(i: number, j: number) {\n    this.cells[i][j].flagged = !this.cells[i][j].flagged;\n    if (this.cells[i][j].flagged) {\n      this.flags--;\n    } else {\n      this.flags++;\n    }\n  }\n\n  hasNeighbours(i: number, j: number): boolean {\n    return Boolean(this.isInGrid(i, j) && this.cells[i][j].neighbors > 0);\n  }\n\n  makeVisible(i: number, j: number) {\n    if (\n      this.isInGrid(i, j) &&\n      !this.cells[i][j].visible &&\n      !this.cells[i][j].isMine() &&\n      !this.cells[i][j].flagged\n    ) {\n      this.cells[i][j].visible = true;\n      this.covered--;\n      if (!this.hasNeighbours(i, j)) {\n        this.makeVisible(i - 1, j);\n        this.makeVisible(i + 1, j);\n        this.makeVisible(i, j - 1);\n        this.makeVisible(i, j + 1);\n      }\n    }\n  }\n\n  hasWon(): boolean {\n    return this.covered === this.mines;\n  }\n\n  showMines() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (this.isMine(i, j)) {\n          this.cells[i][j].flagged = false;\n          this.cells[i][j].visible = true;\n        }\n      }\n    }\n  }\n}\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport './Sprite.scss';\n\nexport enum SpriteName {\n  Happy = '🙂',\n  Sad = '😭',\n  Scared = '😨',\n  Covered = '🟫',\n  Flag = '🚩',\n  Mine = '🐷',\n  Empty = '🟩',\n}\n\ninterface SpriteProps {\n  name?: SpriteName | SpriteName[];\n}\n\nconst Sprite: React.FC<SpriteProps> = ({ name }) => {\n  const names = Array.isArray(name) ? name : [name];\n  return (\n    <div className=\"sprite\">\n      {names.map((name, index) => (\n        <span\n          key={`sprite-${index}`}\n          className={clsx('sprite', `sprite-name-${name}`)}\n        >\n          {name as string}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Sprite;\n","import React from 'react';\n\nimport './GridCell.scss';\n\ninterface GridCellProps {\n  row: number;\n  column: number;\n  renderer: (i: number, j: number) => any;\n}\n\nconst GridCell: React.FC<GridCellProps> = ({ row, column, renderer }) => {\n  return <div className=\"grid-cell\">{renderer(row, column)}</div>;\n};\n\nexport default GridCell;\n","import React from 'react';\n\nimport GridCell from '../GridCell';\n\nimport './Grid.scss';\n\ninterface GridProps {\n  rows: number;\n  columns: number;\n  cellRenderer: (i: number, j: number) => any;\n}\n\nconst Grid: React.FC<GridProps> = ({ rows, columns, cellRenderer }) => {\n  return (\n    <div className=\"grid\">\n      {Array(rows)\n        .fill(1)\n        .map((_: any, i: number) => (\n          <div key={`grid-row-${i + 1}`} className=\"grid-cell-row\">\n            {Array(columns)\n              .fill(1)\n              .map((_: any, j: number) => (\n                <div key={`grid-column-${j + 1}`} className=\"grid-cell-column\">\n                  <GridCell row={i} column={j} renderer={cellRenderer} />\n                </div>\n              ))}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport './Timer.scss';\n\ninterface TimerProps {\n  state: TimerState;\n}\n\nexport enum TimerState {\n  Reset,\n  Running,\n  Stopped,\n}\n\nconst Timer: React.FC<TimerProps> = ({ state }) => {\n  const timer = useRef<number | undefined>(undefined);\n  const [seconds, setSeconds] = useState<number>(0);\n  useEffect(() => {\n    switch (state) {\n      case TimerState.Reset:\n        setSeconds(() => 0);\n        clearInterval(timer.current);\n        timer.current = undefined;\n        break;\n      case TimerState.Running:\n        if (!timer.current) {\n          setSeconds(() => 0);\n          timer.current = window.setInterval(() => {\n            setSeconds((seconds: number) => seconds + 1);\n          }, 1000);\n        }\n        break;\n      case TimerState.Stopped:\n        clearInterval(timer.current);\n        timer.current = undefined;\n        break;\n      default:\n    }\n    return () => {\n      clearInterval(timer.current);\n      timer.current = undefined;\n    };\n  }, [state, timer]);\n\n  return <div className=\"timer\">Time: {seconds}</div>;\n};\n\nexport default Timer;\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport Sprite, { SpriteName } from '../Sprite';\n\nimport './Tile.scss';\n\ninterface TileProps {\n  active: boolean;\n  visible: boolean;\n  mine: boolean;\n  flagged: boolean;\n  neighbors: number;\n}\n\nconst Tile: React.FC<TileProps> = ({\n  active,\n  visible,\n  mine,\n  flagged,\n  neighbors,\n}) => {\n  const spriteNames: SpriteName[] = [];\n  if (visible) {\n    if (mine) {\n      spriteNames.push(SpriteName.Covered);\n      spriteNames.push(SpriteName.Mine);\n    } else {\n      spriteNames.push(SpriteName.Empty);\n    }\n  } else {\n    spriteNames.push(SpriteName.Covered);\n    if (flagged) {\n      spriteNames.push(SpriteName.Flag);\n    }\n  }\n\n  return (\n    <div\n      className={clsx('tile', {\n        'tile-active': active,\n        'tile-visible': visible,\n      })}\n    >\n      <Sprite name={spriteNames} />\n      {visible ? (\n        <span className=\"tile-neighbors\">{neighbors || ''}</span>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Tile;\n","import clsx from 'clsx';\nimport React, { useState, MouseEvent } from 'react';\n\nimport { Grid } from './lib/Grid';\nimport GridComponent from './components/Grid';\nimport Sprite, { SpriteName } from './components/Sprite';\nimport Tile from './components/Tile';\nimport Timer, { TimerState } from './components/Timer';\n\nimport './App.scss';\n\nenum GameState {\n  Default,\n  Playing,\n  Won,\n  Lost,\n}\n\nfunction App() {\n  const [rows] = useState<number>(12);\n  const [columns] = useState<number>(12);\n  const [mines] = useState<number>(24);\n\n  const [grid, setGrid] = useState<Grid>(new Grid(rows, columns, mines));\n  const [moves, setMoves] = useState<number>(0);\n\n  const [gameState, setGameState] = useState<GameState>(GameState.Default);\n  const [guessing, setGuessing] = useState<Boolean>(false);\n  const [timerState, setTimerState] = useState<TimerState>(TimerState.Stopped);\n\n  const playing = gameState === GameState.Playing;\n  const active = playing || gameState === GameState.Default;\n\n  const handleRestart = () => {\n    setGrid(new Grid(rows, columns, mines));\n    setMoves(0);\n    setGameState(GameState.Default);\n    setTimerState(TimerState.Reset);\n  };\n\n  const handleMouseDown = () => {\n    if (playing) setGuessing(true);\n  };\n\n  const handleMouseUp = () => {\n    if (playing) setGuessing(false);\n  };\n\n  const handleAddFlag = (i: number, j: number) => {\n    grid.toggleFlag(i, j);\n    setMoves(moves + 1);\n    setGameState(GameState.Playing);\n    setTimerState(TimerState.Running);\n  };\n\n  const handleSelect = (i: number, j: number) => {\n    if (grid.isMine(i, j)) {\n      grid.showMines();\n      setGameState(GameState.Lost);\n      setTimerState(TimerState.Stopped);\n    } else {\n      grid.makeVisible(i, j);\n      if (grid.hasWon()) {\n        setGameState(GameState.Won);\n        setTimerState(TimerState.Stopped);\n      } else {\n        setGameState(GameState.Playing);\n        setTimerState(TimerState.Running);\n      }\n    }\n    setMoves(moves + 1);\n  };\n\n  const makeClickHandler = (\n    handler: (i: number, j: number) => void,\n    i: number,\n    j: number\n  ): ((event: MouseEvent) => void) | undefined => {\n    if (!active || grid.cells[i][j].visible) {\n      return undefined;\n    }\n    return (event: MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      handler(i, j);\n    };\n  };\n\n  const smiley = guessing\n    ? SpriteName.Scared\n    : playing || gameState !== GameState.Lost\n    ? SpriteName.Happy\n    : SpriteName.Sad;\n  return (\n    <div className=\"App\">\n      <div className=\"heading\">Pigsweeper</div>\n      <div className=\"game\">\n        <div className=\"dashboard\">\n          <div className=\"dashboard-timer\">\n            <Timer state={timerState} />\n          </div>\n          <div\n            className={clsx('dashboard-status', {\n              'status-lost': gameState === GameState.Lost,\n              'status-guessing': guessing,\n            })}\n            onClick={handleRestart}\n          >\n            <Sprite name={smiley} />\n          </div>\n          <div className=\"dashboard-flags\">Flags: {grid.flags}</div>\n        </div>\n        <GridComponent\n          rows={grid.rows}\n          columns={grid.columns}\n          cellRenderer={(i: number, j: number) => {\n            const cell = grid.cellAt(i, j);\n\n            return (\n              <div\n                onMouseDown={handleMouseDown}\n                onMouseUp={handleMouseUp}\n                onClick={makeClickHandler(handleSelect, i, j)}\n                onContextMenu={makeClickHandler(handleAddFlag, i, j)}\n              >\n                <Tile\n                  active={active}\n                  visible={cell.visible}\n                  mine={cell.isMine()}\n                  neighbors={cell.neighbors}\n                  flagged={cell.flagged}\n                />\n              </div>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}