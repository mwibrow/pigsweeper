{"version":3,"sources":["lib/Grid.ts","components/Timer/Timer.tsx","components/GridCell/GridCell.tsx","components/Grid/Grid.tsx","components/Tile/Tile.tsx","App.tsx","components/TileEvents/TileEvents.tsx","reportWebVitals.ts","index.tsx"],"names":["GridCellKind","TimerState","GridCell","kind","Empty","visible","flagged","neighbors","this","Mine","Grid","rows","columns","mines","cells","flags","covered","Math","max","min","initialise","i","push","j","ignoreI","ignoreJ","k","floor","random","isMine","setKind","map","ii","jj","isInGrid","create","Boolean","hasNeighbours","makeVisible","row","column","renderer","className","cellRenderer","Array","fill","_","Tile","active","mine","others","clsx","GameState","Timer","state","timer","useRef","undefined","useState","seconds","setSeconds","useEffect","Reset","clearInterval","current","Running","window","setInterval","Stopped","cancelEvent","event","stopPropagation","preventDefault","TileEvents","children","onTouchStart","onTouchEnd","onLongTouchEnd","longTouchDuration","longTouch","setLongTouch","timeout","clearTimeout","handleTouchStart","setTimeout","handleTouchEnd","rightClick","mouseEvent","nativeEvent","which","button","onMouseDown","onMouseUp","onTouchMove","onClick","onContextMenu","App","grid","setGrid","moves","setMoves","Default","gameState","setGameState","guessing","setGuessing","timerState","setTimerState","Playing","Lost","Won","cell","cellAt","isVisible","showMines","hasWon","toggleFlag","handleLongTouchEnd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf832fd0.chunk.js","sourcesContent":["export enum GridCellKind {\n  Empty = 'empty',\n  Mine = 'mine',\n}\n\nexport class GridCell {\n  kind: GridCellKind = GridCellKind.Empty;\n  visible: boolean = false;\n  flagged: boolean = false;\n  neighbors: number = 0;\n\n  setKind(kind: GridCellKind) {\n    this.kind = kind;\n  }\n\n  isMine(): boolean {\n    return this.kind === GridCellKind.Mine;\n  }\n}\n\nexport class Grid {\n  cells: GridCell[][];\n  rows: number;\n  columns: number;\n  mines: number;\n  flags: number;\n  covered: number;\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.rows = Math.max(rows, 2);\n    this.columns = Math.max(columns, 2);\n    this.mines = Math.max(Math.min(mines, this.rows * this.columns - 1), 1);\n    this.flags = this.mines;\n    this.covered = this.rows * this.flags;\n    this.cells = [];\n    this.initialise();\n  }\n\n  initialise() {\n    for (let i: number = 0; i < this.rows; i++) {\n      this.cells.push([]);\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i].push(new GridCell());\n      }\n    }\n  }\n\n  create(i?: number, j?: number) {\n    const ignoreI = i;\n    const ignoreJ = j;\n    for (let i: number = 0; i < this.rows; i++) {\n      this.cells.push([]);\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i].push(new GridCell());\n      }\n    }\n    for (let k: number = this.mines; k > 0; k--) {\n      const i: number = Math.floor(Math.random() * this.rows);\n      const j: number = Math.floor(Math.random() * this.columns);\n      if (this.isMine(i, j) || i === ignoreI || j === ignoreJ) {\n        k++;\n      } else {\n        this.cells[i][j].setKind(GridCellKind.Mine);\n      }\n    }\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (!this.isMine(i, j)) {\n          let neighbors = 0;\n          [i - 1, i, i + 1].map((ii) =>\n            // eslint-disable-next-line array-callback-return\n            [j - 1, j, j + 1].map((jj) => {\n              if (this.isMine(ii, jj)) {\n                neighbors++;\n              }\n            })\n          );\n          this.cells[i][j].neighbors = neighbors;\n        }\n      }\n    }\n    this.flags = this.mines;\n    this.covered = this.rows * this.columns;\n  }\n\n  cellAt(i: number, j: number): GridCell {\n    return this.cells[i][j];\n  }\n\n  isInGrid(i: number, j: number): boolean {\n    return i >= 0 && i < this.rows && j >= 0 && j < this.columns;\n  }\n\n  isMine(i: number, j: number): boolean {\n    return this.isInGrid(i, j) && this.cells[i][j].isMine();\n  }\n\n  isVisible(i: number, j: number): boolean {\n    return this.isInGrid(i, j) && this.cells[i][j].visible;\n  }\n\n  reset() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        this.cells[i][j].flagged = false;\n        this.cells[i][j].visible = false;\n      }\n    }\n  }\n\n  restart() {\n    this.create();\n  }\n\n  reveal() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (this.isMine(i, j)) {\n          this.cells[i][j].flagged = false;\n          this.cells[i][j].visible = true;\n        }\n      }\n    }\n  }\n\n  hasWon(): boolean {\n    return this.covered === this.mines;\n  }\n\n  toggleFlag(i: number, j: number) {\n    this.cells[i][j].flagged = !this.cells[i][j].flagged;\n    if (this.cells[i][j].flagged) {\n      this.flags--;\n    } else {\n      this.flags++;\n    }\n  }\n\n  hasNeighbours(i: number, j: number): boolean {\n    return Boolean(this.isInGrid(i, j) && this.cells[i][j].neighbors > 0);\n  }\n\n  makeVisible(i: number, j: number) {\n    if (\n      this.isInGrid(i, j) &&\n      !this.cells[i][j].visible &&\n      !this.cells[i][j].isMine() &&\n      !this.cells[i][j].flagged\n    ) {\n      this.cells[i][j].visible = true;\n      this.covered--;\n      if (!this.hasNeighbours(i, j)) {\n        this.makeVisible(i - 1, j);\n        this.makeVisible(i + 1, j);\n\n        this.makeVisible(i, j - 1);\n        this.makeVisible(i, j + 1);\n\n        this.makeVisible(i - 1, j - 1);\n        this.makeVisible(i - 1, j + 1);\n\n        this.makeVisible(i + 1, j - 1);\n        this.makeVisible(i + 1, j + 1);\n      }\n    }\n  }\n\n  showMines() {\n    for (let i: number = 0; i < this.rows; i++) {\n      for (let j: number = 0; j < this.columns; j++) {\n        if (this.isMine(i, j)) {\n          this.cells[i][j].flagged = false;\n          this.cells[i][j].visible = true;\n        }\n      }\n    }\n  }\n}\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport './Timer.scss';\n\ninterface TimerProps {\n  state: TimerState;\n}\n\nexport enum TimerState {\n  Reset,\n  Running,\n  Stopped,\n}\n\nconst Timer: React.FC<TimerProps> = ({ state }) => {\n  const timer = useRef<number | undefined>(undefined);\n  const [seconds, setSeconds] = useState<number>(0);\n  useEffect(() => {\n    switch (state) {\n      case TimerState.Reset:\n        setSeconds(() => 0);\n        clearInterval(timer.current);\n        timer.current = undefined;\n        break;\n      case TimerState.Running:\n        if (!timer.current) {\n          setSeconds(() => 0);\n          timer.current = window.setInterval(() => {\n            setSeconds((seconds: number) => seconds + 1);\n          }, 1000);\n        }\n        break;\n      case TimerState.Stopped:\n        clearInterval(timer.current);\n        timer.current = undefined;\n        break;\n      default:\n    }\n    return () => {\n      clearInterval(timer.current);\n      timer.current = undefined;\n    };\n  }, [state, timer]);\n\n  return <div className=\"timer\">Time: {seconds}</div>;\n};\n\nexport default Timer;\n","import React from 'react';\n\nimport './GridCell.scss';\n\ninterface GridCellProps {\n  row: number;\n  column: number;\n  renderer: (i: number, j: number) => any;\n}\n\nconst GridCell: React.FC<GridCellProps> = ({ row, column, renderer }) => {\n  return <div className=\"grid-cell\">{renderer(row, column)}</div>;\n};\n\nexport default GridCell;\n","import React from 'react';\n\nimport GridCell from '../GridCell';\n\nimport './Grid.scss';\n\ninterface GridProps {\n  rows: number;\n  columns: number;\n  cellRenderer: (i: number, j: number) => any;\n}\n\nconst Grid: React.FC<GridProps> = ({ rows, columns, cellRenderer }) => {\n  return (\n    <div className=\"grid\">\n      {Array(rows)\n        .fill(1)\n        .map((_: any, i: number) => (\n          <div key={`grid-row-${i + 1}`} className=\"grid-cell-row\">\n            {Array(columns)\n              .fill(1)\n              .map((_: any, j: number) => (\n                <div key={`grid-column-${j + 1}`} className=\"grid-cell-column\">\n                  <GridCell row={i} column={j} renderer={cellRenderer} />\n                </div>\n              ))}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport './Tile.scss';\n\ninterface TileProps {\n  active: boolean;\n  visible: boolean;\n  mine: boolean;\n  flagged: boolean;\n  neighbors: number;\n}\n\nconst Tile: React.FC<TileProps> = ({\n  active,\n  visible,\n  mine,\n  flagged,\n  neighbors,\n  ...others\n}) => {\n  return (\n    <div\n      className={clsx('tile', {\n        'tile-active': active,\n        'tile-visible': visible,\n      })}\n      {...others}\n    >\n      <div\n        className={clsx(\n          'tile-image',\n          `tile-image-kind-${mine ? 'mine' : 'empty'}`\n        )}\n      />\n      <div className={clsx('tile-neighbors', `tile-neighbors-${neighbors}`)} />\n      {flagged ? <div className=\"tile-flagged\" /> : null}\n    </div>\n  );\n};\n\nexport default Tile;\n","import clsx from 'clsx';\nimport React, { useState, MouseEvent } from 'react';\n\nimport { Grid } from './lib/Grid';\nimport GridComponent from './components/Grid';\nimport Tile from './components/Tile';\nimport Timer, { TimerState } from './components/Timer';\nimport TileEvents from './components/TileEvents';\n\nimport './App.scss';\n\nenum GameState {\n  Default,\n  Playing,\n  Won,\n  Lost,\n}\n\nconst cancelEvent = (event: MouseEvent) => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\nfunction App() {\n  const [rows] = useState<number>(12);\n  const [columns] = useState<number>(12);\n  const [mines] = useState<number>(24);\n\n  const [grid, setGrid] = useState<Grid>(new Grid(rows, columns, mines));\n  const [moves, setMoves] = useState<number>(0);\n\n  const [gameState, setGameState] = useState<GameState>(GameState.Default);\n  const [guessing, setGuessing] = useState<Boolean>(false);\n  const [timerState, setTimerState] = useState<TimerState>(TimerState.Stopped);\n\n  const playing = gameState === GameState.Playing;\n  const active = playing || gameState === GameState.Default;\n\n  const handleRestart = () => {\n    setGrid(new Grid(rows, columns, mines));\n    setMoves(0);\n    setGuessing(false);\n    setGameState(GameState.Default);\n    setTimerState(TimerState.Reset);\n  };\n\n  const handleTouchStart = (i: number, j: number) => {\n    setGuessing(true);\n  };\n\n  const handleTouchEnd = (i: number, j: number) => {\n    setGuessing(false);\n    if (moves === 0) {\n      grid.create(i, j);\n    }\n    if (grid.isMine(i, j)) {\n      grid.showMines();\n      setGameState(GameState.Lost);\n      setTimerState(TimerState.Stopped);\n    } else {\n      grid.makeVisible(i, j);\n      if (grid.hasWon()) {\n        setGameState(GameState.Won);\n        setTimerState(TimerState.Stopped);\n      } else {\n        setGameState(GameState.Playing);\n        setTimerState(TimerState.Running);\n      }\n    }\n    setMoves(moves + 1);\n  };\n\n  const handleLongTouchEnd = (i: number, j: number) => {\n    setGuessing(false);\n    if (moves === 0) {\n      grid.create(i, j);\n    }\n    grid.toggleFlag(i, j);\n    setMoves(moves + 1);\n  };\n\n  return (\n    <div className=\"App\" onContextMenu={cancelEvent} onClick={cancelEvent}>\n      <div className=\"heading\">Pigsweeper</div>\n      <div className=\"game\">\n        <div className=\"dashboard\">\n          <div className=\"dashboard-timer\">\n            <Timer state={timerState} />\n          </div>\n          <div\n            className={clsx('dashboard-status', {\n              'status-lost': gameState === GameState.Lost,\n              'status-guessing': guessing,\n              'status-won': gameState === GameState.Won,\n            })}\n            onClick={handleRestart}\n          />\n          <div className=\"dashboard-flags\">Flags: {grid.flags}</div>\n        </div>\n        <GridComponent\n          rows={grid.rows}\n          columns={grid.columns}\n          cellRenderer={(i: number, j: number) => {\n            const cell = grid.cellAt(i, j);\n\n            return (\n              <TileEvents\n                active={active && !grid.isVisible(i, j)}\n                onTouchStart={() => handleTouchStart(i, j)}\n                onTouchEnd={() => handleTouchEnd(i, j)}\n                onLongTouchEnd={() => handleLongTouchEnd(i, j)}\n              >\n                <Tile\n                  active={active}\n                  visible={cell.visible}\n                  mine={cell.isMine()}\n                  neighbors={cell.neighbors}\n                  flagged={cell.flagged}\n                />\n              </TileEvents>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { MouseEvent, TouchEvent, useState, useRef } from 'react';\n\ninterface TileEventsProps {\n  chidlren?: React.ReactNode;\n  onTouchStart: () => void;\n  onTouchEnd: () => void;\n  onLongTouchEnd: () => void;\n  longTouchDuration?: number;\n  active?: boolean;\n}\n\nconst cancelEvent = (event: MouseEvent | TouchEvent) => {\n  event.stopPropagation();\n  event.preventDefault();\n};\n\nconst TileEvents: React.FC<TileEventsProps> = ({\n  children,\n  onTouchStart,\n  onTouchEnd,\n  onLongTouchEnd,\n  longTouchDuration = 500,\n  active,\n}) => {\n  const [longTouch, setLongTouch] = useState<boolean>(false);\n\n  const timeout = useRef<undefined | number>();\n\n  if (!active) {\n    window.clearTimeout(timeout.current);\n    return <div className=\"tile-events\">{children}</div>;\n  }\n\n  const handleTouchStart = (\n    event: MouseEvent<HTMLElement> | TouchEvent<HTMLElement>\n  ) => {\n    cancelEvent(event);\n    onTouchStart();\n    setLongTouch(false);\n    timeout.current = window.setTimeout(() => {\n      setLongTouch(true);\n      onLongTouchEnd();\n    }, longTouchDuration);\n  };\n\n  const handleTouchEnd = (\n    event: MouseEvent<HTMLElement> | TouchEvent<HTMLElement>\n  ) => {\n    let rightClick = false;\n    const mouseEvent = event as MouseEvent;\n    if (\n      mouseEvent.nativeEvent.which === 3 ||\n      mouseEvent.nativeEvent.button === 2\n    ) {\n      rightClick = true;\n    }\n    cancelEvent(event);\n    window.clearTimeout(timeout.current);\n    if (!longTouch) {\n      if (rightClick) {\n        onLongTouchEnd();\n      } else {\n        onTouchEnd();\n      }\n    }\n    setLongTouch(false);\n  };\n\n  return (\n    <div\n      className=\"tile-events\"\n      onMouseDown={handleTouchStart}\n      onMouseUp={handleTouchEnd}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchEnd}\n      onClick={cancelEvent}\n      onContextMenu={cancelEvent}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default TileEvents;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}